import 'package:hive/hive.dart';
import '../models/offline_order.dart';
import 'orders_service.dart';
import 'notification_service.dart'; // ðŸ”” Ø®Ø¯Ù…Ø© Ø§Ù„Ø¥Ø´Ø¹Ø§Ø±Ø§Øª

class OfflineOrdersService {
  final _box = Hive.box<OfflineOrder>('offline_orders');

  Future<void> addOfflineOrder(OfflineOrder o) async {
    await _box.add(o);
  }

  Future<List<OfflineOrder>> pendingOrders() async {
    return _box.values.where((o) => !o.synced).toList();
  }

  Future<void> markSynced(OfflineOrder o) async {
    o.synced = true;
    await o.save();
  }

  Future<void> syncAll() async {
    final pendings = await pendingOrders();
    int syncedCount = 0;

    for (var o in pendings) {
      final id = await OrdersService().createOrder(
        userId: o.order.userId,
        totalPrice: o.order.totalPrice,
        items: o.order.items,
      );
      if (id != null) {
        await markSynced(o);
        syncedCount++;
      }
    }

    // ðŸ”” Ø¥Ø´Ø¹Ø§Ø± Ø§Ù„Ù…Ø²Ø§Ù…Ù†Ø© Ø¥Ø°Ø§ ØªÙ… Ù…Ø²Ø§Ù…Ù†Ø© Ø·Ù„Ø¨Ø§Øª
    if (syncedCount > 0) {
      await NotificationService.showOfflineSyncNotification(
        title: 'ðŸ“¶ ØªÙ… Ø¥Ø±Ø³Ø§Ù„ Ø§Ù„Ø·Ù„Ø¨Ø§Øª Ø§Ù„Ù…Ø­Ù„ÙŠØ©',
        body: 'ØªÙ…Øª Ù…Ø²Ø§Ù…Ù†Ø© $syncedCount Ø·Ù„Ø¨ Ø¨Ù†Ø¬Ø§Ø­',
      );
    }
  }
}
